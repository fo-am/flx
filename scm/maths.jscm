;; -*- mode: scheme; -*-
;; Planet Fluxus Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(js "var sin=Math.sin")
(js "var cos=Math.cos")
(js "var pi = Math.PI")
(js "var two_pi = Math.PI*2")


(define (sqrt a) (Math.sqrt a))
(define (pow a b) (Math.pow a b))
(define (square x) (* x x))
(define (trunc x) (js "~~x"))
(define (feq? a b) (< (Math.abs (- a b)) Number.EPSILON))

(define (vector x y z) (list x y z))

(define (vx v) (list-ref v 0))
(define (vy v) (list-ref v 1))
(define (vz v) (list-ref v 2))
(define (vw v) (list-ref v 3))

(define (veq? a b) 
  (and (feq? (vx a) (vx b))
       (feq? (vy a) (vy b))
       (feq? (vz a) (vz b))))

(define (vector-clone v)
  (vector (vx v) (vy v) (vz v)))

(define (vadd a b)
  (vector (+ (vx a) (vx b))
          (+ (vy a) (vy b))
          (+ (vz a) (vz b))))

(define (vmag v)
  (sqrt (+ (square (vx v))
           (square (vy v))
           (square (vz v)))))

(define (vsub a b)
  (vector (- (vx a) (vx b))
          (- (vy a) (vy b))
          (- (vz a) (vz b))))

(define (vneg a)
  (vector (- 0 (vx a))
          (- 0 (vy a))
          (- 0 (vz a))))

(define (vmul v a)
  (vector (* (vx v) a) (* (vy v) a) (* (vz v) a)))

(define (vdiv v a)
  (vector (/ (vx v) a) (/ (vy v) a) (/ (vz v) a)))

(define (vdist a b)
  (vmag (vsub a b)))

(define (vlerp v1 v2 t)
	(vadd v1 (vmul (vsub v2 v1) t)))

(define (vnormalise v)
  (vdiv v (vmag v)))

(define (vdot a b)
  (+ (* (vx a) (vx b)) 
     (* (vy a) (vy b))
     (* (vz a) (vz b))))

(define (vcross a b)
  (vector (- (* (vy a) (vz b)) (* (vz a) (vy b)))
	  (- (* (vz a) (vx b)) (* (vx a) (vz b)))
	  (- (* (vx a) (vy b)) (* (vy a) (vx b)))))

(define (rndvec) (vector (rndf) (rndf) (rndf)))
(define (crndvec) (vsub (rndvec) (vector 0.5 0.5 0.5)))
(define (crndf) (- (rndf) 0.5))

(define (hcrndvec s)
  (let ((a (* (rndf) 360)))
    (vector (* s (sin a)) (* s (cos a)) 0)))

;; steal quats from the gl library
(define rad-conv 0.017453292)

(define (quat x y z w) (quat4.create (list x y z w)))

(define (qaxisangle axis angle)
  (let ((angle (* angle 0.017453292)))
    (let ((axis (vmul (vnormalise axis) (sin (/ angle 2)))))
      (quat (vx axis) (vy axis) (vz axis) (cos (/ angle 2))))))

(define (qnormalise q)  (quat4.normalise q))
(define (qmul a b) (quat4.multiply a b))
(define (q->m q) (quat4.toMat4 q))
(define (qslerp a b t) 
  (let ((r (quat 0 0 0 0)))
    (quat4.slerp a b t r)))

;; note - operations (and above) destructive but faster - todo: fix

(define (midentity) (mat4.identity (mat4.create)))
(define (minverse m) (mat4.inverse m))
(define (mmul a b) (mat4.multiply a b))
(define (mtransform m v) (mat4.multiplyVec3 m v))
(define (mtranslate m v) (mat4.translate m v))
(define (mscale m v) (mat4.scale m v))
(define (mrotate m axis angle) (mat4.rotate m angle axis))


(define (maim2 m v up)
  (let ((l (vector 0 0 0))
	(u (vector 0 0 0))
        (aim-matrix (mat4.create)))
    (vec3.cross v up l)
    (vec3.cross v l u)

    (js "aim_matrix[0]=vx(v);")
    (js "aim_matrix[1]=vy(v);")
    (js "aim_matrix[2]=vz(v);")
    (js "aim_matrix[3]=0;")

    (js "aim_matrix[4]=vx(l);")
    (js "aim_matrix[5]=vy(l);")
    (js "aim_matrix[6]=vz(l);")
    (js "aim_matrix[7]=0;")

    (js "aim_matrix[8]=vx(u);")
    (js "aim_matrix[9]=vy(u);")
    (js "aim_matrix[10]=vz(u);")
    (js "aim_matrix[11]=0;")

    (js "aim_matrix[12]=0;")
    (js "aim_matrix[13]=0;")
    (js "aim_matrix[14]=0;")
    (js "aim_matrix[15]=1;")

    (mat4.multiply m aim-matrix)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (maths-unit-test)
  (assert (feq? (sqrt 25) 5) "sqrt")
  (assert (feq? (pow 3 2) 7) "pow")
  (assert (eq? (square 10) 100) "square")
  (assert (eq? (trunc 40.4) 40) "trunc")
  (assert (feq? 20.4 20.4) "feq? 1")
  (assert (not (feq? 20.4 20.42)) "feq? 2")
  (let ((v (vector 1 2 3)))
    (assert (feq? (vx v) 1) "vx")
    (assert (feq? (vy v) 2) "vy")
    (assert (feq? (vz v) 3) "vz")
    (assert (veq? v (vector 1 2 3)) "veq? 1") 
    (assert (not (veq? v (vector 30 20 30))) "veq? 2") 
    (let ((vc (vector-clone v)))
      (assert (veq? vc (vector 1 2 3)) "vector-clone 1")
      (set! vc (vector 0 0 0))
      (assert (veq? v (vector 1 2 3)) "vector-clone 2"))
    (assert (veq? (vadd v (vector 1 1 1)) (vector 2 3 4)) "vadd")
    (assert (feq? (vmag (vector 10 0 0)) 10) "vmag")
    (assert (veq? (vsub v (vector 2 2 2)) (vector -1 0 1)) "vsub")
    (assert (veq? (vneg v) (vector -1 -2 -3)) "vneg")
    (assert (veq? (vmul v 10) (vector 10 20 30)) "vmul")
    (assert (veq? (vdiv v 2) (vector 0.5 1 1.5)) "vdiv")
    (assert (feq? (vdist (vector 10 0 0) (vector 0 0 0)) 10) "vdist")
    (assert (veq? (vlerp (vector 0 0 0) (vector 10 20 30) 0.5)
		  (vector 5 10 15)) "vlerp")
    (assert (feq? (vmag (vnormalise (vector 1 4 923))) 1) "vnormalise")
    (assert (feq? (vdot (vector 0 0 0) (vector 10 0 0)) 10) "vdot")
    (assert (feq? (vcross (vector 1 0 0) (vector 0 1 0)) (vector 0 0 1)) 
	    "vcross")
    ;; todo: add quat and matrix
    )))

(maths-unit-test)
